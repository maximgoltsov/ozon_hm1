// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/maximgoltsov/botproject/internal/pkg/core/product/models"
	models0 "github.com/maximgoltsov/botproject/internal/pkg/core/productType/models"
)

// MockProductType is a mock of ProductType interface.
type MockProductType struct {
	ctrl     *gomock.Controller
	recorder *MockProductTypeMockRecorder
}

// MockProductTypeMockRecorder is the mock recorder for MockProductType.
type MockProductTypeMockRecorder struct {
	mock *MockProductType
}

// NewMockProductType creates a new mock instance.
func NewMockProductType(ctrl *gomock.Controller) *MockProductType {
	mock := &MockProductType{ctrl: ctrl}
	mock.recorder = &MockProductTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductType) EXPECT() *MockProductTypeMockRecorder {
	return m.recorder
}

// DeleteProductTypeById mocks base method.
func (m *MockProductType) DeleteProductTypeById(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductTypeById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductTypeById indicates an expected call of DeleteProductTypeById.
func (mr *MockProductTypeMockRecorder) DeleteProductTypeById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductTypeById", reflect.TypeOf((*MockProductType)(nil).DeleteProductTypeById), ctx, id)
}

// GetProductType mocks base method.
func (m *MockProductType) GetProductType(ctx context.Context, id uint64) (models0.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductType", ctx, id)
	ret0, _ := ret[0].(models0.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductType indicates an expected call of GetProductType.
func (mr *MockProductTypeMockRecorder) GetProductType(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductType", reflect.TypeOf((*MockProductType)(nil).GetProductType), ctx, id)
}

// GetProductTypes mocks base method.
func (m *MockProductType) GetProductTypes(ctx context.Context, limit, offset uint64, desc bool) []models0.ProductType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductTypes", ctx, limit, offset, desc)
	ret0, _ := ret[0].([]models0.ProductType)
	return ret0
}

// GetProductTypes indicates an expected call of GetProductTypes.
func (mr *MockProductTypeMockRecorder) GetProductTypes(ctx, limit, offset, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductTypes", reflect.TypeOf((*MockProductType)(nil).GetProductTypes), ctx, limit, offset, desc)
}

// UpsertProductType mocks base method.
func (m *MockProductType) UpsertProductType(ctx context.Context, pt models0.ProductType) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProductType", ctx, pt)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProductType indicates an expected call of UpsertProductType.
func (mr *MockProductTypeMockRecorder) UpsertProductType(ctx, pt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProductType", reflect.TypeOf((*MockProductType)(nil).UpsertProductType), ctx, pt)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// DeleteProductById mocks base method.
func (m *MockProduct) DeleteProductById(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductById indicates an expected call of DeleteProductById.
func (mr *MockProductMockRecorder) DeleteProductById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductById", reflect.TypeOf((*MockProduct)(nil).DeleteProductById), ctx, id)
}

// GetProduct mocks base method.
func (m *MockProduct) GetProduct(ctx context.Context, id uint64) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductMockRecorder) GetProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProduct)(nil).GetProduct), ctx, id)
}

// GetProducts mocks base method.
func (m *MockProduct) GetProducts(ctx context.Context, limit, offset uint64, desc bool) []models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, limit, offset, desc)
	ret0, _ := ret[0].([]models.Product)
	return ret0
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductMockRecorder) GetProducts(ctx, limit, offset, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProduct)(nil).GetProducts), ctx, limit, offset, desc)
}

// UpsertProduct mocks base method.
func (m *MockProduct) UpsertProduct(ctx context.Context, product models.Product) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertProduct", ctx, product)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertProduct indicates an expected call of UpsertProduct.
func (mr *MockProductMockRecorder) UpsertProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertProduct", reflect.TypeOf((*MockProduct)(nil).UpsertProduct), ctx, product)
}
